#include <ocTreeLeaf.h>

/**
 * root constructor
 */
ocTreeLeaf::ocTreeLeaf(std::vector<Mesh*> &meshesPointer, int maximumVertsPerLeaf, int maximumSplitDepth)
{
	m_isLeaf = true;
	std::cout << "root constructor called" << std::endl;
	m_myMeshes = meshesPointer;
	m_maxVerticesPerNode = maximumVertsPerLeaf;
	m_maxSplitDepth = maximumSplitDepth;
	m_level = 0;

	// initialize identifier
	std::vector<bool> id(m_maxSplitDepth*3);

	for (int i = 0; i <= id.size(); i++) {
		id[i] = false;
	}

	m_identifier = id;

	// calculate and set dimensions
	getRootDimensions();
}

/**
 * subTree constructor
 */
ocTreeLeaf::ocTreeLeaf(
		std::vector<glm::vec3> vertices,
		int parentLevel,
		int vertsMax,
		int splitsMax,
		float parentDimensions[],
		std::vector<bool> &parId,
		std::vector<bool> &splitDirections)
{
	m_isLeaf = true;
	setDimensions(parentDimensions, splitDirections);
	m_maxVerticesPerNode = vertsMax;
	m_maxSplitDepth = splitsMax;
	m_level = parentLevel+1;
	m_parentIdentifier = parId;

	// initialize identifier
	int identifierSize = m_parentIdentifier.size();
	int levelOffset = m_level*3-3;
	std::vector<bool> id(identifierSize);
	std::cout << "level: " << m_level << ", identifierBuilt: ";
	for (int i = 0; i < levelOffset; i++) {
		  id[i] = parId[i];
		  if (id[i] == true) {
			  std::cout << "1";
		  } else {
			  std::cout << "0";
		  }
	}

	// set the latest values of the identifier, the given splitDirections
	id[levelOffset] = splitDirections[0];
		if (id[levelOffset] == true) {
		  std::cout << "1";
		} else {
		  std::cout << "0";
		}
	id[levelOffset+1] = splitDirections[1];
		if (id[levelOffset+1] == true) {
		  std::cout << "1";
		} else {
		  std::cout << "0";
		}
	id[levelOffset+2] = splitDirections[2];
		if (id[levelOffset+2] == true) {
		  std::cout << "1";
		} else {
		  std::cout << "0";
		}
	for (int j = levelOffset+3; j < identifierSize; j++) {
		id[j] = false;
		if (id[j] == false) {
			std::cout << "0";
		}
		if (id[j] == true) {
			std::cout << "1";
		}
	}
	std::cout<<std::endl;
	m_identifier = id;

	// debugging identifier as binary string for testing purposes
	// debugIdentifierasString();

	/**
	 * converting the vector to a list for convenience
	 */
	std::list<glm::vec3> verticesList;
	for(size_t t = 0; t < vertices.size();++t){
		verticesList.push_back(vertices[t]);
	}
	// next line is very important
	buildTreeRecursively(verticesList);
}

// destructor
ocTreeLeaf::~ocTreeLeaf() {
	//  @FIXME do something
}

// getter for boolean attribute isLeaf
bool ocTreeLeaf::getisLeaf() {
	return m_isLeaf;
}

/**
 * get Root dimensions based on all vertices in the ocTreeLeaf
 */
void ocTreeLeaf::getRootDimensions(void) {
	m_minX = 0.;
	m_maxX = 0.;
	m_minY = 0.;
	m_maxY = 0.;
	m_minZ = 0.;
	m_maxZ = 0.;
	m_meanX = 0.;
	m_meanY = 0.;
	m_meanZ = 0.;

	std::vector<glm::vec3> vertices = getVerticesOfMesh(0);
		for (std::vector<glm::vec3>::iterator it = vertices.begin(); it != vertices.end(); ++it) {
			if ((*it).x < m_minX) {
				m_minX = (*it).x;
			}
			if ((*it).x > m_maxX) {
				m_maxX = (*it).x + 0.0001;
			}
			if ((*it).y < m_minY) {
				m_minY =(*it).y;
			}
			if ((*it).y > m_maxY) {
				m_maxY = (*it).y + 0.0001;
			}
			if ((*it).z < m_minZ) {
				m_minZ =(*it).z;
			}
			if ((*it).z > m_maxZ) {
				m_maxZ = (*it).z + 0.0001;
			}
		}
		m_meanX = (float)(m_minX + m_maxX)/2;
		m_meanY = (float)(m_minY + m_maxY)/2;
		m_meanZ = (float)(m_minZ + m_maxZ)/2;
}

/**
 * setDimensions function for setting min, max and mean-values for x, y and z direction
 *
 * parDimensions: {[0]minX, [1]maxX, [2]meanX, [3]minY, [4]maxY, [5]meanY, [6]minZ, [7]maxZ, [8]meanZ};
 */
void ocTreeLeaf::setDimensions(float parentDimensions[], std::vector<bool> &splitDirections) {
	// splitDirectios::at(0)
	if (splitDirections.at(0) == false) {
		m_minZ = parentDimensions[8];	// minZ = p.meanZ
		m_maxZ = parentDimensions[7];	// maxZ = p.maxZ
	} else {
		m_minZ = parentDimensions[6];	// minZ = p.minZ
		m_maxZ = parentDimensions[8];	// maxZ = p.meanZ
	}

	// splitDirectios::at(1)
	if (splitDirections.at(1) == false) {
		m_minY = parentDimensions[5];	// minY = p.meanY
		m_maxY = parentDimensions[4];	// maxY = p.maxY
	} else {
		m_minY = parentDimensions[3];	// minY = p.minY
		m_maxY = parentDimensions[5];	// maxY = p.meanY
	}

	// splitDirectios::at(2)
	if (splitDirections.at(2) == false) {
		m_minX = parentDimensions[0];	// minX = p.minX
		m_maxX = parentDimensions[2];	// maxX = p.meanX
	} else {
		m_minX = parentDimensions[2];	// minX = p.meanX
		m_maxX = parentDimensions[1];	// maxX = p.maxX
	}

	// mean values:
	m_meanZ = (m_minZ+m_maxZ)/2;
	m_meanY = (m_minY+m_maxY)/2;
	m_meanX = (m_minX+m_maxX)/2;
}

void ocTreeLeaf:: buildTreeRecursively (std::list<glm::vec3>& subsetVerts) {
	/**
	 * ###########################################################
	 * ######## BEGIN FOR-LOOP THROUGH ALL GIVEN VERTICES ########
	 * ###########################################################
	 */
	// @FIXME delete
	// std::cout << "subVerts size BEFORE: " << subsetVerts.size() << std::endl;
	for(std::list<glm::vec3>::iterator it = subsetVerts.begin(); it != subsetVerts.end(); ) {
		// add every vertex to the root node
		if (m_level == 0) {
			m_verticesInBounds.push_back((*it));
			++it;
		} else {


			/**
			 * if the current node is on a level greater than 0, vertices that share x,y or z-values with
			 * the maximum values of the current node need to be treated differently
			 *
			 * whether a vertex with an 'edgecase' value is assigned to a node or not is determined by the
			 * split directions, which can be retrieved via looking at the last, 2nd-to-last and 3rd-to-last
			 * values of a node's identifier.
			 */

			bool determineZ = m_identifier[m_level];
			bool determineY = m_identifier[m_level+1];
			bool determineX = m_identifier[m_level+2];
			bool eraseVertex = false;

			if (determineZ == false) {									// 3rd-to-last	= false
				if (determineY == false) {									// 2nd-to-last	= false
					if (determineX == false) {									// identifier = 000
						if ((*it).x >= m_minX && (*it).x < m_maxX) {
							if ((*it).y >= m_minY && (*it).y < m_maxY) {
								if ((*it).z >= m_minZ && (*it).z < m_maxZ) {
									m_verticesInBounds.push_back((*it));			// add to vertices of this node
									if ((*it).x==m_minX||(*it).x==m_maxX||(*it).y==m_minY||(*it).y==m_maxY||(*it).z==m_minZ||(*it).z==m_maxZ){
										eraseVertex = true;
									}
								}
							}
						}
					} else {													// identifier = 001
						if ((*it).x >= m_minX && (*it).x <= m_maxX) {
							if ((*it).y >= m_minY && (*it).y <= m_maxY) {
								if ((*it).z >= m_minZ && (*it).z < m_maxZ) {
							 		m_verticesInBounds.push_back((*it));
							 		if ((*it).x==m_minX||(*it).x==m_maxX||(*it).y==m_minY||(*it).y==m_maxY||(*it).z==m_minZ||(*it).z==m_maxZ){
							 			eraseVertex = true;
									}
								}
							}
						}
					}
				} else {
					if (determineX == false) {									// identifier = 010
						if ((*it).x >= m_minX && (*it).x < m_maxX) {
							if ((*it).y >= m_minY && (*it).y <= m_maxY) {
								if ((*it).z >= m_minZ && (*it).z <= m_maxZ) {
									m_verticesInBounds.push_back((*it));
									if ((*it).x==m_minX||(*it).x==m_maxX||(*it).y==m_minY||(*it).y==m_maxY||(*it).z==m_minZ||(*it).z==m_maxZ){
										eraseVertex = true;
									}
								}
							}
						}
					} else {													// identifier = 011
						if ((*it).x >= m_minX && (*it).x <= m_maxX) {
							if ((*it).y >= m_minY && (*it).y <= m_maxY) {
								if ((*it).z >= m_minZ && (*it).z <= m_maxZ) {
									m_verticesInBounds.push_back((*it));
									if ((*it).x==m_minX||(*it).x==m_maxX||(*it).y==m_minY||(*it).y==m_maxY||(*it).z==m_minZ||(*it).z==m_maxZ){
										eraseVertex = true;
									}
								}
							}
						}
					}
				}
			} else {													// 3rd-to-last = true
				if (determineY == false) {									// 2nd-to-last = false
					if (determineX == false) {									// identifier = 100
						if ((*it).x >= m_minX && (*it).x < m_maxX) {
							if ((*it).y >= m_minY && (*it).y < m_maxY) {
								if ((*it).z >= m_minZ && (*it).z < m_maxZ) {
									m_verticesInBounds.push_back((*it));
									if ((*it).x==m_minX||(*it).x==m_maxX||(*it).y==m_minY||(*it).y==m_maxY||(*it).z==m_minZ||(*it).z==m_maxZ){
										eraseVertex = true;
									}
								}
							}
						}
					} else {													// identifier = 101
						if ((*it).x >= m_minX && (*it).x <= m_maxX) {
							if ((*it).y >= m_minY && (*it).y < m_maxY) {
								if ((*it).z >= m_minZ && (*it).z < m_maxZ) {
									m_verticesInBounds.push_back((*it));
									if ((*it).x==m_minX||(*it).x==m_maxX||(*it).y==m_minY||(*it).y==m_maxY||(*it).z==m_minZ||(*it).z==m_maxZ){
										eraseVertex = true;
									}
								}
							}
						}
					}
				} else {
					if (determineX == false) {									// identifier = 110
						if ((*it).x >= m_minX && (*it).x < m_maxX) {
							if ((*it).y >= m_minY && (*it).y < m_maxY) {
								if ((*it).z >= m_minZ && (*it).z <= m_maxZ) {
									m_verticesInBounds.push_back((*it));
									if ((*it).x==m_minX||(*it).x==m_maxX||(*it).y==m_minY||(*it).y==m_maxY||(*it).z==m_minZ||(*it).z==m_maxZ){
										eraseVertex = true;
									}
								}
							}
						}
					} else {													// identifier = 111
						if ((*it).x >= m_minX && (*it).x <= m_maxX) {
							if ((*it).y >= m_minY && (*it).y < m_maxY) {
								if ((*it).z >= m_minZ && (*it).z <= m_maxZ) {
									m_verticesInBounds.push_back((*it));
									if ((*it).x==m_minX||(*it).x==m_maxX||(*it).y==m_minY||(*it).y==m_maxY||(*it).z==m_minZ||(*it).z==m_maxZ){
										std::cout << "DELETED vertex X: " << (*it).x << ", Y: " <<(*it).y << ", Z: "<<(*it).z << std::endl;
										eraseVertex = true;
									}

								}
							}
						}
					}
				}
			}
			if(eraseVertex)
				it = subsetVerts.erase(it);
			else
				++it;
		}
	}
	// std::cout << "subVerts size AFTER: " << subsetVerts.size() << std::endl;
	std::cout << "I contain " << m_verticesInBounds.size() << " vertices." << std::endl;

	/**
	 * #########################################################
	 * ######## END FOR-LOOP THROUGH ALL GIVEN VERTICES ########
	 * #########################################################
	 */
	if (m_verticesInBounds.size() > m_maxVerticesPerNode) {
		if (m_level < m_maxSplitDepth) {
			split();
		} else {
			// @FIXME do something
		}
	}
	std::vector<bool> check = {false,false,true,false,false,false,false,false,false};	// 001000000
	ocTreeLeaf* testNode = getNodeByIdentifierArray(check, true);
}

bool ocTreeLeaf::split() {
	std::cout << "split() called" << std::endl;
	float parDimensions[9] = {m_minX, m_maxX, m_meanX, m_minY, m_maxY, m_meanY, m_minZ, m_maxZ, m_meanZ};
	std::vector<bool> split0 = {false,	false,	false};		// 000
	std::vector<bool> split1 = {false,	false,	true};		// 001
	std::vector<bool> split2 = {false,	true,	false};		// 010
	std::vector<bool> split3 = {false,	true,	true};		// 011
	std::vector<bool> split4 = {true,	false,	false};		// 100
	std::vector<bool> split5 = {true,	false,	true};		// 101
	std::vector<bool> split6 = {true,	true,	false};		// 110
	std::vector<bool> split7 = {true,	true,	true};		// 111

	// turning the leaf into a node
	ocTree * newOcTreee = new ocTree(
		m_verticesInBounds,
		m_level,
		m_maxVerticesPerNode,
		m_maxSplitDepth,
		parDimensions,
		m_identifier
	);

	ocTreeLeaf* chidlLeaf0 = new ocTreeLeaf(m_verticesInBounds, m_level, m_maxVerticesPerNode, m_maxSplitDepth, parDimensions, m_identifier, split0);
	ocTreeLeaf* chidlLeaf1 = new ocTreeLeaf(m_verticesInBounds, m_level, m_maxVerticesPerNode, m_maxSplitDepth, parDimensions, m_identifier, split1);
	ocTreeLeaf* chidlLeaf2 = new ocTreeLeaf(m_verticesInBounds, m_level, m_maxVerticesPerNode, m_maxSplitDepth, parDimensions, m_identifier, split2);
	ocTreeLeaf* chidlLeaf3 = new ocTreeLeaf(m_verticesInBounds, m_level, m_maxVerticesPerNode, m_maxSplitDepth, parDimensions, m_identifier, split3);
	ocTreeLeaf* chidlLeaf4 = new ocTreeLeaf(m_verticesInBounds, m_level, m_maxVerticesPerNode, m_maxSplitDepth, parDimensions, m_identifier, split4);
	ocTreeLeaf* chidlLeaf5 = new ocTreeLeaf(m_verticesInBounds, m_level, m_maxVerticesPerNode, m_maxSplitDepth, parDimensions, m_identifier, split5);
	ocTreeLeaf* chidlLeaf6 = new ocTreeLeaf(m_verticesInBounds, m_level, m_maxVerticesPerNode, m_maxSplitDepth, parDimensions, m_identifier, split6);
	ocTreeLeaf* chidlLeaf7 = new ocTreeLeaf(m_verticesInBounds, m_level, m_maxVerticesPerNode, m_maxSplitDepth, parDimensions, m_identifier, split7);
	m_myChildren[0] = chidlLeaf0;
	m_myChildren[1] = chidlLeaf1;
	m_myChildren[2] = chidlLeaf2;
	m_myChildren[3] = chidlLeaf3;
	m_myChildren[4] = chidlLeaf4;
	m_myChildren[5] = chidlLeaf5;
	m_myChildren[6] = chidlLeaf6;
	m_myChildren[7] = chidlLeaf7;

	turnIntoNode();

//	~ocTreeLeaf();
	return true;
}

bool  ocTreeLeaf::turnIntoNode() {
	m_isLeaf = false;
//	myVertices.swap(verticesInBounds);
	return true;
}

std::vector<Mesh*> ocTreeLeaf::getMyMeshes (void) {
	return m_myMeshes;
}

std::vector<Mesh*>::iterator ocTreeLeaf::getMesh (int n) {
	int count = 0;
	for(std::vector<Mesh*>::iterator it = m_myMeshes.begin(); it != m_myMeshes.end(); ++it) {
		if (count == n) {
			return(it);
		}
	}
}

std::vector <glm::vec3> ocTreeLeaf::getVertices() {
	std::vector<glm::vec3> result;
	for(std::vector<Mesh*>::iterator it = m_myMeshes.begin(); it != m_myMeshes.end(); ++it) {
		std::vector<glm::vec3> itVerts = (*it)->get_m_vertices(); 		// get vertices of current Mesh
		result.insert(result.end(), itVerts.begin(), itVerts.end());	// insert vertices into result vector
	}
	return result;
}

std::vector<glm::vec3> ocTreeLeaf::getVerticesOfMesh (int n) {
	int count = 0;
	for(std::vector<Mesh*>::iterator it = m_myMeshes.begin(); it != m_myMeshes.end(); ++it) {
		if (count == n) {
			return(*it)->get_m_vertices();
		}
	}
}

// @FIXME: keep this up to date!
void ocTreeLeaf::debugTreeInfo(void) {
	std::cout << "==========[ocTreeLeaf INFO]==========" << std::endl;
	std::cout << "total number of vertices in this ocTreeLeaf:" << (*getMesh(0))->getNumVertices() << std::endl;
	std::cout << "maximum number of vertices per leaf node: " << m_maxVerticesPerNode << std::endl;
	std::cout << "maximum split depth: " << m_maxSplitDepth << std::endl;
	std::cout << "dimension x: " << m_minX << " to " << m_maxX << ", mean value: " << m_meanX << std::endl;
	std::cout << "dimension y: " << m_minY << " to " << m_maxY << ", mean value: " << m_meanY << std::endl;
	std::cout << "dimension z: " << m_minZ << " to " << m_maxZ << ", mean value: " << m_meanZ << std::endl;
	std::cout << "total number of nodes: [@FIXME]" << std::endl;
	std::cout << "total number of leafs: [@FIXME]" << std::endl;
	std::cout << "average number of vertices / leaf: [@FIXME]" << std::endl;
	std::cout << "highest number of vertices in one leaf: [@FIXME]" << std::endl;
	std::cout << "lowest number of vertices in one leaf: [@FIXME]" << std::endl;
	std::cout << "========[ocTreeLeaf INFO END]========" << std::endl;

}

void ocTreeLeaf::debugFirstVertex(void) {
	std::vector<Mesh*>::iterator firstMesh = getMesh(0);
	std::vector<glm::vec3> vertices = (*firstMesh)->get_m_vertices();
	std::cout << "First vertex(x,y,z): " << vertices[0].x <<", "<< vertices[0].y <<", "<< vertices[0].z <<", "<< std::endl;
}

void ocTreeLeaf::debugAllVertices(void) {
	for(std::vector<Mesh*>::iterator it = m_myMeshes.begin(); it != m_myMeshes.end(); ++it) {
		std::vector<glm::vec3> vertices = (*it)->get_m_vertices();
		for (int i=0; i <= (*it)->getNumVertices(); i++) {
			std::cout << "x, y, z of vertex #" << i <<": "
			<< vertices[i].x <<", "
			<< vertices[i].y <<", "
			<< vertices[i].z
			<< std::endl;
		}
	}
}

void ocTreeLeaf::debugIdentifierasString(void) {
	if (m_isLeaf == true) {
		int identifierSize = m_identifier.size();
		std::cout << "LEAF:: my level: " << m_level << std::endl;
		std::cout << "parentIdentir: ";
		for (int i = 0; i < identifierSize; i++) {
			if (m_parentIdentifier[i] == false) {
				std::cout << "0";
			} else {
				std::cout << "1";
			}
		}
		std::cout << std::endl;
		std::cout << "my identifier: ";
		for (int i = 0; i < identifierSize; i++) {
			if (m_identifier[i] == false) {
				std::cout << "0";
			} else {
				std::cout << "1";
			}
		}
		std::cout << std::endl;
	}
}

ocTreeLeaf* ocTreeLeaf::getNodeByIdentifierArray(std::vector<bool> compare, bool debugInfo) {
	std::cout << "getNodeByIdentifierArray() called" << std::endl;
	std::cout << "identifier passed: ";
	for (int i = 0; i != compare.size(); i++) {
		if (compare[i] == true) {
			std::cout << "1";
		} else {
			std::cout << "0";
		}
	}
	std::cout << std::endl;

	// end of recursion; return current node
	if (m_level == m_maxSplitDepth) {
		if (debugInfo == true) {
			debugIdentifierasString();
			std::cout << "leaf found via getNodeByIdentifierArray" << std::endl;
			std::cout << "minX: " << m_minX << ", meanX: " << m_meanX << ",maxX: " << m_maxX << std::endl;
			std::cout << "minY: " << m_minY << ", meanY: " << m_meanY << ",maxY: " << m_maxY << std::endl;
			std::cout << "minZ: " << m_minZ << ", meanZ: " << m_meanZ << ",maxZ: " << m_maxZ << std::endl;
		}
		ocTreeLeaf *result = new ocTreeLeaf(*this);
	}

	// building target identifier
	// positions before current level offset
	int levelOffset = m_level*3;

	std::vector<bool> target_identifier(m_level+3);

	for (int i = 0; i < levelOffset; i++) {
		target_identifier[i] = m_identifier[i];
	}
	// set the latest values of the identifier, the given splitDirections
	std::cout << "setting individual stuff" << std::endl;
	target_identifier[levelOffset]		= compare[levelOffset];
	target_identifier[levelOffset+1]	= compare[levelOffset+1];
	target_identifier[levelOffset+2]	= compare[levelOffset+2];

	// set the rest of the target identifier
	for (int j = levelOffset+3; j < m_maxSplitDepth*3; j++) {
		target_identifier[j] = m_identifier[j];
	}
	// @FIXME: hier weitermachen




////	if (this->getisLeaf() == false) {	// current node is not a leaf -> skip
////		std::cout << "isLeaf; aborting" << std::endl;
////		return NULL;
////	} else {
//		int maxLength = m_maxSplitDepth*3;
//		std::cout << "maxLength: " << maxLength << std::endl;
//		int checksum = 0;
//		for (int i = 0; i != maxLength; i++) {
//			if (m_identifier[i] == compare[i]) {
//				checksum++;
//			}
//		}
//		if (checksum == maxLength) {	// right node found
//			if (debugInfo == true) {
//				debugIdentifierasString();
//				std::cout << "leaf found via getNodeByIdentifierArray" << std::endl;
//				std::cout << "minX: " << m_minX << ", meanX: " << m_meanX << ",maxX: " << m_maxX << std::endl;
//				std::cout << "minY: " << m_minY << ", meanY: " << m_meanY << ",maxY: " << m_maxY << std::endl;
//				std::cout << "minZ: " << m_minZ << ", meanZ: " << m_meanZ << ",maxZ: " << m_maxZ << std::endl;
//			}
//			ocTreeLeaf *result = new ocTreeLeaf(*this);
//			return result;
//		}
//	// }
}

ocTreeLeaf* ocTreeLeaf::getNodeByCoordinates(float x, float y, float z, bool debugInfo) {
	std::cout << "getNodeByCoordinates called; passed x, y & z: " << x << ", " << y <<", " << z << std::endl;
	debugIdentifierasString();
	// given coordinate is out of bounds; return NULL
	if (x < m_minX || x > m_maxX || y < m_minY || y > m_maxY || z < m_minZ || z > m_maxZ) {
		std::cout << "everything is out of bounds" << std::endl;
		return NULL;
	}

	// if current level is equal to max level, end recursion; return this node
	if (m_level == m_maxSplitDepth) {
		// debug additional information if wanted
		if (debugInfo == true) {
			std::cout << "RIGHT NODE HERE" << std::endl;
			debugIdentifierasString();
			std::cout << "leaf found via getNodeByCoodinates()" << std::endl;
			std::cout << "minX: " << m_minX << ", meanX: " << m_meanX << ",maxX: " << m_maxX << std::endl;
			std::cout << "minY: " << m_minY << ", meanY: " << m_meanY << ",maxY: " << m_maxY << std::endl;
			std::cout << "minZ: " << m_minZ << ", meanZ: " << m_meanZ << ",maxZ: " << m_maxZ << std::endl;
		}
		ocTreeLeaf *result = new ocTreeLeaf(*this);
		return result;
	}

	int levelOffset = m_level*3;
	if (levelOffset == 0) {
		levelOffset += 3;
	}
	std::vector<bool> target_identifier(m_maxSplitDepth*3);

	// assembling the relevant values to find target node
	std::vector<bool> target (3);
	if (x < m_meanX) {
		if (y < m_meanY) {
			if (z < m_meanZ) {
				target = {true,false,false};	// 100
			} else {
				target = {false,false,false};	// 000
			}
		} else {
			if (z < m_meanZ) {
				target = {true,true,false};		// 110
			} else {
				target = {false,true,false};	// 010
			}
		}
	} else {
		if (y < m_meanY) {
			if (z < m_meanZ) {
				target = {true,false,true};		// 101
			} else {
				target = {false,false,true};	// 001
			}
		} else {
			if (z < m_meanZ) {
				target = {true,true,true};		// 111
			} else {
				target = {false,true,true};		// 011
			}
		}
	}

	// building the identifier of the target node
	// copy current identifier up until offset
	std::cout << "beginning to build target identifier" << std::endl;
	std::cout << "levelOffset: " << levelOffset << std::endl;
	for (int i = 0; i < levelOffset; i++) {
		target_identifier[i] = m_identifier[i];
	}
	// set the latest values of the identifier, the given splitDirections
	std::cout << "setting individual stuff" << std::endl;
	target_identifier[levelOffset]		= target[0];
	target_identifier[levelOffset+1]	= target[1];
	target_identifier[levelOffset+2]	= target[2];

	// set the rest of the target identifier
	for (int j = levelOffset+3; j < m_maxSplitDepth*3; j++) {
		target_identifier[j] = m_identifier[j];
	}

	// @FIXME
	// debug
	std::cout << "target_identifier built: ";
	for (int k = 0; k < target_identifier.size(); k++) {
		if (target_identifier[k] == true) {
			std::cout << "1";
		} else {
			std::cout << "0";
		}
	}
	std::cout << std::endl;

	// recursively pass the coordinate down to the next level
	std::cout << "recursive call" << std::endl;
	getNodeByIdentifierArray(target_identifier, true)->getNodeByCoordinates(x,y,z, debugInfo);
}
